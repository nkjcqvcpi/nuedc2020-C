

case 0x10:TA2CCR1 = 165; TA2CCR2 = 135;break; //Turn right;P1IFG=0x00;
    case 0x18:TA2CCR1 = 157; TA2CCR2 = 142;break; //
    case 0xC:TA2CCR1 = 142; TA2CCR2 = 157;break;
    case 0x4:TA2CCR1 = 135; TA2CCR2 = 165;break;
    
//Interrupt for Front Sensor



#pragma vector=PORT1_VECTOR
__interrupt void Front_Sensor(){
    //When potential of P1 changed, P1IFG's BITs value change and  raise an interrupt
    switch(P1IFG){
    case 0x10:TA2CCR1 = 100;TA2CCR2 = 200;P1IFG=0x00;break; //Turn Left
    case 0x20:TA2CCR1 = 50;TA2CCR2 = 250;P1IFG=0x00;break;
    case 0x8:TA2CCR1 = 200;TA2CCR2 = 100;P1IFG=0x00;break;
    case 0x4:TA2CCR1 = 250;TA2CCR2 = 50;P1IFG=0x00;break;
    case 0x38:P4OUT &= ~BIT0;P4OUT &= ~BIT1;P4OUT &= ~BIT2;P4OUT &= ~BIT3;
        P1IE &= ~BIT2+~BIT3+~BIT4+~BIT5+~BIT6;
        _DINT();
        P8OUT |= BIT1;delay_s(1);P8OUT &= ~BIT1;
        break;
    case 0x7C:P4OUT &= ~BIT0;P4OUT &= ~BIT1;P4OUT &= ~BIT2;P4OUT &= ~BIT3;
        P1IE &= ~BIT2+~BIT3+~BIT4+~BIT5+~BIT6;
        _DINT();
        P8OUT |= BIT1;delay_s(1);P8OUT &= ~BIT1;
        break;
    default:TA2CCR1 = 150;TA2CCR2 = 150;P1IFG=0x00;break;
    }
}







    
    PORT_Interrupt_Init();
    
    /*case 0x64: TA0CCR3 = 75;TA0CCR4 = 175;delay_s(0.1);break; //10011
            case 0x74: TA0CCR3 = 75;TA0CCR4 = 175;delay_s(0.1);break; //10111
            case 0x70: TA0CCR3 = 50;TA0CCR4 = 200;delay_s(0.1);break; //00111
            case 0x78: TA0CCR3 = 50;TA0CCR4 = 200;delay_s(0.1);break; //01111

            case 0x4C: TA0CCR3 = 175;TA0CCR4 = 75;delay_s(0.1);break; //11001
            case 0x5C: TA0CCR3 = 175;TA0CCR4 = 75;delay_s(0.1);break; //11101
            case 0x1C: TA0CCR3 = 200;TA0CCR4 = 50;delay_s(0.1);break; //11100
            case 0x3C: TA0CCR3 = 200;TA0CCR4 = 50;delay_s(0.1);break; //11110

            case 0x44: case 0x0: P4OUT = 0x00;P8OUT |= BIT1;delay_s(1);P8OUT &= ~BIT1;break;*/
            //case 0x41: P4OUT = 0x00;P8OUT |= BIT1;delay_s(1);P8OUT &= ~BIT1;break;
            //case 0x0: P4OUT = 0x00;P8OUT |= BIT1;delay_s(1);P8OUT &= ~BIT1;break;
            //case 0x45: P4OUT = 0x00;P8OUT |= BIT1;delay_s(1);P8OUT &= ~BIT1;break;
            //case 0x61: P4OUT = 0x00;P8OUT |= BIT1;delay_s(1);P8OUT &= ~BIT1;break;




void PORT_Interrupt_Init(){
    /* P1.2-6(!): Front IR Sensor Input
     * P2.2-3,4-6(!): Back IR Sensor Input*/

    // Enable internal resistance
    //P1REN |= BIT2+BIT3+BIT4+BIT5+BIT6;
    P2REN |= BIT2+BIT3+BIT4+BIT5+BIT6;

    // Set as pull-Up resistance
    //P1OUT |= BIT2+BIT3+BIT4+BIT5+BIT6;
    P2OUT |= BIT2+BIT3+BIT4+BIT5+BIT6;

    // Set trigger as High -> Low
    //P1IES |= BIT2+BIT3+BIT4+BIT5+BIT6;
    P2IES |= BIT2+BIT3+BIT4+BIT5+BIT6;

    // Clear port interrupt flag(IFG)
    //P1IFG &= ~BIT2;P4OUT &= ~BIT3;P4OUT &= ~BIT4;P4OUT &= ~BIT5;P4OUT &= ~BIT6;
    P2IFG = 0x00;

    // Enable port interrupt
    //P1IE |= BIT2+BIT3+BIT4+BIT5+BIT6;
    P2IE |= BIT2+BIT3+BIT4+BIT5+BIT6;

    // Enable Global Interrupt
    __enable_interrupt();
}
/*
#pragma vector=PORT2_VECTOR
__interrupt void P2_ISR(void){
    switch(P2IFG & 0x7C){
        case 0x30: TA0CCR3 = 125-25;TA0CCR4 = 175-25;P2IFG = 0x00;break;
        case 0x20: TA0CCR3 = 100-25;TA0CCR4 = 200-25;P2IFG = 0x00;break;
        case 0x60: TA0CCR3 = 75-25;TA0CCR4 = 225-25;P2IFG = 0x00;break;
        case 0x40: TA0CCR3 = 50-25;TA0CCR4 = 250-25;P2IFG = 0x00;break;

        case 0x18: TA0CCR3 = 175-25;TA0CCR4 = 125-25;P2IFG = 0x00;break;
        case 0x8: TA0CCR3 = 200-25;TA0CCR4 = 100-25;P2IFG = 0x00;break;
        case 0xC: TA0CCR3 = 225-25;TA0CCR4 = 75-25;P2IFG = 0x00;break;
        case 0x4: TA0CCR3 = 250-25;TA0CCR4 = 50-25;P2IFG = 0x00;break;
        default: TA0CCR3 = 150;TA0CCR4 = 150;break;
   }
   if ((P2IN==0x0)||(P2IN==0x44)){
                    TA0CCR3 = 0;TA0CCR4 = 0;P4OUT = 0x00;
                }
}*/




while(1){
        switch(P2IN&0x7D){
        case 0x75: TA0CCR3 = 100;TA0CCR4 = 275;break; //001000
        case 0x71: TA0CCR3 = 100;TA0CCR4 = 275;break; //011000
        case 0x79: TA0CCR3 = 50;TA0CCR4 = 300;break; //010000
        case 0x78: TA0CCR3 = 50;TA0CCR4 = 300;break; //110000
        case 0x7C: TA0CCR3 = 0;TA0CCR4 = 350;break; //100000

        case 0x6D: TA0CCR3 = 275;TA0CCR4 = 100;break; //000100
        case 0x4D: TA0CCR3 = 275;TA0CCR4 = 100;break; //000110
        case 0x5D: TA0CCR3 = 300;TA0CCR4 = 50;break; //000010
        case 0x1D: TA0CCR3 = 300;TA0CCR4 = 50;break; //000011
        case 0x3D: TA0CCR3 = 350;TA0CCR4 = 0;break;

        case 0x65:P4OUT = 0x00;P8OUT |= BIT1;delay_s(1);P8OUT &= ~BIT1;break;
        //case 0x41: P4OUT = 0x00;P8OUT |= BIT1;delay_s(1);P8OUT &= ~BIT1;break;
        //case 0x0: P4OUT = 0x00;P8OUT |= BIT1;delay_s(1);P8OUT &= ~BIT1;break;
        //case 0x45: P4OUT = 0x00;P8OUT |= BIT1;delay_s(1);P8OUT &= ~BIT1;break;
        //case 0x61: P4OUT = 0x00;P8OUT |= BIT1;delay_s(1);P8OUT &= ~BIT1;break;
        case 0x7D: TA0CCR3 = 150;TA0CCR4 = 150;break;
        }
        delay_us(5);
    }


void path(void){
    //init PWM port
    P1DIR |= BIT4+BIT5;
    P1SEL |= BIT4+BIT5;
    P1OUT |= BIT4+BIT5;
    TA0CCR0 = 512-1;
    TA0CCTL3 = OUTMOD_7;
    TA0CCTL4 = OUTMOD_7;

    //init Lx port
    P4DIR |= BIT0+BIT1+BIT2+BIT3;

    //Set Lx=[1,0,1,0]
    P4OUT |= BIT0;
    P4OUT |= BIT2;
    P4OUT &= ~BIT1;
    P4OUT &= ~BIT3;

    //set duty cycle and start PWM output
    TA0CCR3 = 500;
    TA0CCR4 = 500;
    TA0CTL = TASSEL_2 + MC_1 + TACLR;
    delay_ms(100);
    TA0CCR3 = 150;
    TA0CCR4 = 150;
    delay_s(2);
    TA0CCR3 = 400;
    TA0CCR4 = 0;
    delay_s(1.5);
    TA0CCR3 = 150;
    TA0CCR4 = 150;
    delay_s(2);
    TA0CCR3 = 0;
    TA0CCR4 = 0;
}











#include <msp430.h> 
#define uint unsigned int
#define delay_us(x) __delay_cycles((unsigned long)(4*x))
#define delay_ms(x) __delay_cycles((unsigned long)(4000*x))
#define delay_s(x) __delay_cycles((unsigned long)(4000000*x))



int main(void){
    WDTCTL = WDTPW + WDTHOLD;
    P8DIR |= BIT1;
    P8OUT &= ~BIT1;
    //P2DIR &= ~(BIT2+BIT3+BIT4);
    //P2DIR |= BIT4+BIT5;
    P1SEL |= BIT4+BIT5;
    P1OUT |= BIT4+BIT5;
    TA0CCR0 = 512-1;
    TA0CCTL3 = OUTMOD_7;
    TA0CCTL4 = OUTMOD_7;

    //init Lx port
    P3DIR |= BIT3+BIT4+BIT5+BIT6;
    P3OUT |= BIT3+BIT5;

    //set duty cycle and start PWM output
    TA0CCR3 = 350;
    TA0CCR4 = 350;
    TA0CTL = TASSEL_2 + MC_1 + TACLR;
    delay_s(0.01);
    TA0CCR3 = 150;
    TA0CCR4 = 150;
    /*while(1){
        switch(P2IN&0x1C){
            case 0x18: case 0x10: TA0CCR3 = 250; = 50;delay_s(0.6);break;
            case 0xC: case 0x1C: TA0CCR3 = 0; = 0;P4OUT = 0x00;P8OUT |= BIT1;delay_s(1);P8OUT &= ~BIT1;break;
            case 0x4: TA0CCR3 = 100; = 200;break;
            default: TA0CCR3 = 150; = 150;break;
        }
    }*/
    return 0;
}
